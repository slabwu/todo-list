(()=>{"use strict";var __webpack_modules__={558:()=>{eval('\n;// ./src/pubsub.js\nclass PubSub {\n    #events = {};\n\n    on(eventName, fn) {\n        this.#events[eventName] = this.#events[eventName] || [];\n        this.#events[eventName].push(fn);\n    }\n\n    off(eventName, fn) {\n        if (this.#events[eventName]) {\n            for (let i = 0; i < this.#events[eventName].length; i++) {\n                if (this.#events[eventName][i] === fn) {\n                    this.#events[eventName].splice(i, 1);\n                    break;\n                }\n            };\n        };\n    }\n\n    emit(eventName, data) {\n        if (this.#events[eventName]) {\n            this.#events[eventName].forEach((fn) => {\n                fn(data);\n            });\n        }\n    }\n\n    get list() {\n        return this.#events;\n    }\n};\n\nconst Events = new PubSub;\n;// ./src/helper.js\n\n\nfunction test(code) {\n    console.log(code);\n}\n\nfunction addElement(name, tag, target, className = undefined, text = undefined) {\n    const element = document.createElement(`${tag}`);\n    (text) ? element.textContent = name : element.id = name;\n    if (className) element.classList.add(`${className}`);\n    if (target === "body") {\n        document.body.appendChild(element);\n    } else {\n        document.getElementById(`${target}`).appendChild(element);\n    }\n}\n\nfunction addButton(name, target, fn) {\n    const element = document.createElement("button");\n    element.textContent = name;\n    element.id = `${camelCase(name)}Btn`;\n    if (target === "body") {\n        document.body.appendChild(element);\n    } else {\n        document.getElementById(`${target}`).appendChild(element);\n    }\n    element.addEventListener("click", (e) => {fn(e)});\n}\n\nfunction addCheckbox(task, target) {\n    const element = document.createElement("input");\n    element.type = "checkbox";\n    element.id = task.name;\n    element.name = task.name;\n    (task.completed) ? element.checked = true : element.checked = false;\n    document.getElementById(`${target}`).appendChild(element);\n    element.addEventListener("click", () => {\n        task.completed = element.checked;\n        Events.emit("updateTasks");\n    });\n}\n\nfunction deleteElementsFrom(target) {\n    document.getElementById(target).innerHTML = ``;\n}\n\nfunction camelCase(str) {\n    return str\n        .replace(/\\s(.)/g, function (a) {\n            return a.toUpperCase();\n        })\n        .replace(/\\s/g, \'\')\n        .replace(/^(.)/, function (b) {\n            return b.toLowerCase();\n        });\n}\n;// ./src/task.js\n\n\n\n\nclass Task {\n    constructor(name, description, project) {\n        this.name = name;\n        this.description = description;\n        this.project = project;\n        this.completed = false;\n    }\n}\n\nclass List {\n    #listItems = [];\n\n    get list() {\n        return this.#listItems;\n    }\n\n    add(name, description, project) {\n        this.#listItems.push(new Task(name, description, project));\n        Events.emit("updateTasks");\n    }\n}\n\nconst Tasks = new List;\n;// ./src/project.js\n\n\nclass Project {\n    constructor(name) {\n        this.name = name;\n    }\n\n    setAsCurrent() {\n        Projects.current = this.name;\n        Events.emit("updateTasks");\n    }\n}\n\nclass ProjectManager {\n    #projectList = [];\n    #currentProject = "Inbox";\n\n    get list() {\n        return this.#projectList;\n    }\n\n    get current() {\n        return this.#currentProject;\n    }\n\n    set current(project) {\n        this.#currentProject = project;\n    }\n\n    add(name) {\n        this.#projectList.push(new Project(name));\n        Events.emit("updateProjects");\n    }\n}\n\nconst Projects = new ProjectManager;\n;// ./src/dialog.js\n\n\nclass Dialog {\n    constructor(name) {\n        this.name = name;\n        this.reference = document.getElementById(`${name}`);\n        this.answers = {};\n\n        this.confirmBtn = document.getElementById("confirmBtn");\n        confirmBtn.addEventListener("click", (e) => {\n            e.preventDefault();\n            [...document.querySelector(`#${name} form`).children].forEach(element => {\n                if (element.name) {\n                    this.answers[element.name] = element.value;\n                }\n            });\n            Tasks.add(`${this.answers.name}`,`${this.answers.description}`, "Default");\n            this.close();\n        });\n    }\n    \n    open() {\n        this.reference.showModal();\n    }\n\n    close() {\n        this.reference.close();\n    }\n\n    get source() {\n        return this.reference;\n    }\n}\n\nconst TaskDialog = new Dialog("toDoDialog");\n;// ./src/render.js\n\n\n\n\n\n\nclass Renderer {\n    projectTitle;\n    constructor() {\n        Events.on("updateTasks", this.renderTasks);\n        Events.on("updateProjects", this.renderProjects);\n\n        addElement("content", "div", "body");\n        addElement("header", "header", "content");\n        addElement("sidebar", "nav", "content");\n        addElement("main", "main", "content");\n        addElement("footer", "footer", "content");\n\n        addElement("Right Meow", "h1", "header", "title", true);\n        addElement(`${Projects.current}`, "h2", "main", "projectTitle", true);\n        addButton("Add Task", "main", () => {TaskDialog.open()});\n        addElement("projectList", "div", "sidebar");\n        addElement("taskList", "div", "main");\n    }\n\n    render() {\n        this.renderProjects();\n        this.renderTasks();\n    }\n\n    renderProjects() {\n        deleteElementsFrom("projectList");\n        Projects.list.forEach((project) => {\n            addButton(`${project.name}`, "projectList", () => {\n                project.setAsCurrent();\n                [...document.querySelector("#projectList").children].forEach(project => {\n                    project.classList.remove("active");\n                });\n                document.querySelector(`#${camelCase(Projects.current)}Btn`).classList.add("active");\n                \n            });\n        })\n    }\n\n    renderTasks() {\n        document.querySelector(".projectTitle").textContent = `${Projects.current}`;\n\n        deleteElementsFrom("taskList");\n        let currentTasks = (Projects.current === "Inbox")? Tasks.list : Tasks.list.filter(task => task.project === Projects.current);\n        currentTasks.forEach((task, index) => {\n            let taskContainer = `task${index + 1}`;\n            addElement(taskContainer, "div", "taskList", "task");\n\n            addCheckbox(task, taskContainer);\n            addElement(task.name, "p", taskContainer, "name", true);\n            addElement(task.description, "p", taskContainer, "description", true);\n\n            let elements = [...document.getElementById(`${taskContainer}`).children];\n            elements.shift();\n            test(elements);\n            if (task.completed) {\n                elements.forEach(element => element.classList.add("completed"));\n            } else {\n                elements.forEach(element => element.classList.remove("completed"));\n            }\n        })\n    }\n}\n\nconst Screen = new Renderer;\n;// ./src/index.js\n\n\n\n\n\n\n\n\nScreen.render();\n\nlet defaultTasks = [\n    ["Eat", "Finish dinner", "Home"],\n    ["Walk", "Take a stroll with the dog", "Home"],\n    ["Clean", "Tidy up the room", "Home"],\n    ["Fix", "Fix the ceiling light", "Home"],\n    ["Report", "Submit financial report", "Work"],\n    ["Essay", "Edit conclusion of essay", "Study"]\n];\ndefaultTasks.forEach(task => Tasks.add(task[0], task[1], task[2]));\n\nlet defaultProjects = [ "Inbox", "Home", "Work", "Study" ];\ndefaultProjects.forEach(project => Projects.add(project));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///558\n')}},__webpack_exports__={};__webpack_modules__[558]()})();