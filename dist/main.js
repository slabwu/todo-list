(()=>{"use strict";var __webpack_modules__={558:()=>{eval('\n;// ./src/pubsub.js\nclass PubSub {\n    #events = {};\n\n    on(eventName, fn) {\n        this.#events[eventName] = this.#events[eventName] || [];\n        this.#events[eventName].push(fn);\n    }\n\n    off(eventName, fn) {\n        if (this.#events[eventName]) {\n            for (let i = 0; i < this.#events[eventName].length; i++) {\n                if (this.#events[eventName][i] === fn) {\n                    this.#events[eventName].splice(i, 1);\n                    break;\n                }\n            };\n        };\n    }\n\n    emit(eventName, data) {\n        if (this.#events[eventName]) {\n            this.#events[eventName].forEach((fn) => {\n                fn(data);\n            });\n        }\n    }\n\n    get list() {\n        return this.#events;\n    }\n};\n\nconst Events = new PubSub;\n;// ./src/project.js\n\n\nclass Project {\n    constructor(name) {\n        this.name = name;\n    }\n\n    setAsCurrent() {\n        Projects.current = this.name;\n        Events.emit("updateTasks");\n    }\n}\n\nclass ProjectManager {\n    #projectList = [];\n    #currentProject = "Inbox";\n\n    get list() {\n        return this.#projectList;\n    }\n\n    get current() {\n        return this.#currentProject;\n    }\n\n    set current(project) {\n        this.#currentProject = project;\n        Events.emit("updateProjects");\n        Events.emit("updateTasks");\n    }\n\n    add(name) {\n        this.#projectList.push(new Project(name));\n        Events.emit("updateProjects");\n    }\n\n    delete(project) {\n        this.#projectList = this.list.filter(projects => projects.name != project.name);\n        if (this.current === project.name) {\n            this.current = "Inbox";\n        }\n        Events.emit("updateProjects");\n        Events.emit("updateTasks");\n    }\n}\n\nconst Projects = new ProjectManager;\nEvents.on("updateProjects", () => {localStorage.setItem(\'projects\', JSON.stringify(Projects.list))});\n;// ./src/helper.js\n\n \n\n\nfunction test(code) {\n    console.log(code);\n}\n\nfunction addElement(name, tag, target, className = undefined) {\n    const element = document.createElement(`${tag}`);\n    element.id = name;\n    if (className) element.classList.add(className);\n    appendElement(element, target);\n}\n\nfunction addTextElement(name, tag, target, className = undefined) {\n    const element = document.createElement(`${tag}`);\n    element.textContent = name;\n    element.classList.add(`${className}`);\n    appendElement(element, target);\n}\n\nfunction addButton(name, target, fn, icon) {\n    const element = document.createElement("button");\n    element.textContent = name;\n    element.id = `${camelCase(name)}Btn`;\n    appendElement(element, target);\n    element.addEventListener("click", (e) => {fn(e)});\n    if (icon) {\n        element.innerHTML = `<i class="material-icons">${icon}</i>` + name;\n    }\n}\n\nfunction addIcon(name, target, fn = undefined) {\n    const element = document.createElement("i");\n    element.classList.add("material-icons");\n    element.textContent = name;\n    appendElement(element, target);\n   if (fn) element.addEventListener("click", (e) => {fn(e)});\n}\n\nfunction appendElement(element, target) {\n    if (target === "body") {\n        document.body.appendChild(element);\n    } else {\n        document.getElementById(`${target}`).appendChild(element);\n    }\n}\n\nfunction addCheckbox(task, target) {\n    const element = document.createElement("div");\n    element.id = task.name;\n    element.name = task.name;\n    element.classList.add(\'checkbox\');\n    document.getElementById(`${target}`).appendChild(element);\n    element.addEventListener("click", () => {\n        (task.completed) ? task.completed = false : task.completed = true;\n        Events.emit("updateTasks");\n    });\n}\n\nfunction deleteElementsFrom(target) {\n    document.getElementById(target).innerHTML = ``;\n}\n\nfunction camelCase(str) {\n    return str\n        .replace(/\\s(.)/g, function (a) {\n            return a.toUpperCase();\n        })\n        .replace(/\\s/g, \'\')\n        .replace(/^(.)/, function (b) {\n            return b.toLowerCase();\n        });\n}\n\nfunction overdue(date) {\n    if (date === "") return false;\n    let inputDate = new Date(date.replace(/(\\d\\d)\\/(\\d\\d)\\/(\\d{4})/, "$2-$1-$3")).toISOString();\n    let currentDate = new Date(Date.now()).toISOString();\n\n    return inputDate < currentDate;\n}\n\nfunction filterTasks(tasks) {\n    switch (Projects.current) {\n        case "Inbox":\n            return tasks;\n            break;\n        case "Important":\n            return tasks.filter(task => task.priority === true);\n            break;\n        case "Overdue":\n            return tasks.filter(task => overdue(task.date) === true);\n            break;\n        case "Upcoming":\n            return tasks.filter(task => overdue(task.date) === false);\n            break;\n        default:\n            return tasks.filter(task => task.project === Projects.current);\n    }\n}\n\nfunction getDate(date) {\n    let parts = date.split(\'/\');\n    return `${parts[2]}-${parts[1]}-${parts[0]}`;\n}\n;// ./src/dialog.js\n\n\n\n\n\nclass Dialog {\n    constructor(name) {\n        this.name = name;\n        this.reference = document.getElementById(`${name}`);\n        this.answers = {};\n\n        Events.on("updateProjects", this.populate);\n        \n        if (name === "toDoDialog") {\n            let closeBtn = document.getElementById("closeBtn");\n            closeBtn.addEventListener("click", () => {\n                document.querySelector(`form input[type="text"]`).classList.remove(\'invalid\');\n                this.close();\n            });\n\n            let confirmBtn = document.getElementById("confirmBtn");\n            confirmBtn.addEventListener("click", (e) => {\n                e.preventDefault();\n\n                [...document.querySelector(`#${name} form`).children].forEach(element => {\n                    if (element.name) {\n                        this.answers[element.name] = element.value;\n                    }\n                });\n                this.answers.date = (this.answers.date) ? new Date(this.answers.date).toLocaleDateString() : "";\n                \n                if (document.getElementById("dialogTitle").innerHTML === \'Add Task\' && this.answers.name) {\n                    Tasks.add(`${this.answers.name}`,`${this.answers.description}`, `${this.answers.project}`, `${this.answers.date}`);\n                    this.close();\n                } else if (document.getElementById("dialogTitle").innerHTML === \'Edit Task\') {\n                    this.close();\n                } else {\n                    document.querySelector(`form input[type="text"]`).classList.add(\'invalid\');\n                }\n            });\n        } else if (name === "projectDialog") {\n            let projectCloseBtn = document.getElementById("projectCloseBtn");\n            projectCloseBtn.addEventListener("click", () => {\n                document.querySelector(`form input[type="text"]#projectName`).classList.add(\'invalid\');\n                this.close();\n            });\n    \n            let projectConfirmBtn = document.getElementById("projectConfirmBtn");\n            projectConfirmBtn.addEventListener("click", (e) => {\n                e.preventDefault();\n                [...document.querySelector(`#projectDialog form`).children].forEach(element => {\n                    if (element.name && element.value) {\n                        Projects.add(element.value);\n                        Projects.current = element.value;\n                        this.close();\n                    } else {\n                        document.querySelector(`form input[type="text"]#projectName`).classList.add(\'invalid\');\n                    }\n                });\n            });\n        }};\n    \n    open() {\n        document.querySelector(`form input[type="text"]`).classList.remove(\'invalid\');\n        document.querySelector(`form input[type="text"]#projectName`).classList.remove(\'invalid\');\n        document.getElementById("dialogTitle").innerHTML = \'Add Task\';\n        this.reference.showModal();\n    }\n\n    close() {\n        this.reference.close();\n        this.clear();\n    }\n\n    clear() {\n        [...document.querySelector(`#${this.name} form`).children].forEach(element => {\n            switch(element.name) {\n                case \'name\':\n                case \'description\':\n                case \'date\':\n                    element.value = \'\';\n                    break;\n                case \'project\':\n                    element.value = \'Home\';\n                    break;\n            }\n        });\n    }\n\n    get source() {\n        return this.reference;\n    }\n\n    async edit(fields) {\n        this.open();\n        document.getElementById("dialogTitle").innerHTML = \'Edit Task\';\n        [...document.querySelector(`#${this.name} form`).children].forEach(element => {\n            if (element.name in fields) {\n                if (element.name == \'date\') {\n                    element.value = getDate(fields.date);\n                } else { \n                    element.value = fields[element.name];\n                }\n            }\n        });\n\n        await new Promise(resolve => {\n            document.getElementById("confirmBtn").addEventListener(\'click\', () => {\n              resolve();\n            }, { once: true });\n        });\n\n        return this.answers;\n    }\n\n    populate() {\n        let options = document.getElementById("project");\n        options.innerHTML = \'\';\n        let projects = Projects.list;\n        for (let i = 4; i < projects.length; i++) {\n            const element = document.createElement("option");\n            element.value = projects[i].name;\n            element.innerHTML = projects[i].name;\n            options.appendChild(element);\n        }\n    }\n}\n\nconst TaskDialog = new Dialog("toDoDialog");\nconst ProjectDialog = new Dialog("projectDialog");\n;// ./src/task.js\n\n\n\n\n\nclass Task {\n    constructor(name, description, project, date = undefined, completed = false, priority = false) {\n        this.name = name;\n        this.description = description;\n        this.project = project;\n        this.date = date;\n        this.completed = completed;\n        this.priority = priority;\n    }\n\n    favourite() {\n        this.priority = (this.priority) ? false : true;\n        Events.emit("updateTasks");\n    }\n\n    async edit() {\n        let fields = await TaskDialog.edit({name: this.name, description: this.description, project: this.project, date: this.date});\n        this.name = fields.name;\n        this.description = fields.description;\n        this.project = fields.project;\n        this.date = fields.date;\n        Events.emit("updateTasks");\n    }\n}\n\nclass List {\n    #listItems = [];\n\n    get list() {\n        return this.#listItems;\n    }\n\n    add(name, description, project, date, completed, priority) {\n        this.#listItems.push(new Task(name, description, project, date, completed, priority));\n        Events.emit("updateTasks");\n    }\n\n    delete(task) {\n        this.#listItems = this.list.filter(tasks => tasks.name != task.name);\n        Events.emit("updateTasks");\n    }\n}\n\nconst Tasks = new List;\nEvents.on("updateTasks", () => {localStorage.setItem(\'tasks\', JSON.stringify(Tasks.list))});\n;// ./src/render.js\n\n\n\n\n\n\nclass Renderer {\n    projectTitle;\n    constructor() {\n        Events.on("updateTasks", this.renderTasks);\n        Events.on("updateProjects", this.renderProjects);\n\n        addElement("content", "div", "body");\n        addElement("header", "header", "content");\n        addElement("sidebar", "nav", "content");\n        addElement("main", "main", "content");\n        addElement("mainContainer", "mainContainer", "main");\n        addElement("footer", "footer", "content");\n\n        addIcon("done_all", "header");\n        addTextElement("Right Now", "h1", "header", "title");\n        addTextElement(`${Projects.current}`, "h2", "mainContainer", "projectTitle");\n        addElement("projectList", "div", "sidebar");\n        addButton("Add Project", "sidebar", () => {ProjectDialog.open()}, \'add\');\n        addElement("taskList", "div", "mainContainer");\n        addButton("Add Task", "mainContainer", () => {TaskDialog.open()});\n    }\n\n    render() {\n        this.renderProjects();\n        this.renderTasks();\n    }\n\n    renderProjects() {\n        deleteElementsFrom("projectList");\n        let icons = ["inbox", "star", "assignment_late", "watch_later", "format_list_bulleted"];\n        Projects.list.forEach((project, index) => {\n            if (index === 4) addTextElement(\'Projects\', "h2", "projectList", "projects");\n            let icon = (index <= 4) ? icons[index]: icons[4];\n            addButton(`${project.name}`, "projectList", () => {\n                project.setAsCurrent();\n                [...document.querySelector("#projectList").children].forEach(project => {\n                    project.classList.remove("active");\n                });\n                let current = document.querySelector(`#${camelCase(Projects.current)}Btn`);\n                console.log(Projects.current);\n                if (current) {\n                    document.querySelector(`#${camelCase(Projects.current)}Btn`).classList.add("active");\n                } else {\n                    document.querySelector(`#inboxBtn`).classList.add("active");\n                    Projects.current = \'Inbox\';\n                }\n            }, icon);\n            if (index > 3) addIcon("close", `${camelCase(project.name)}Btn`, () => {Projects.delete(project)});\n        });\n\n        [...document.querySelector("#projectList").children].forEach(project => {\n            project.classList.remove("active");\n        });\n        let current = document.querySelector(`#${camelCase(Projects.current)}Btn`);\n        if (current) {\n            document.querySelector(`#${camelCase(Projects.current)}Btn`).classList.add("active");\n        }\n    }\n\n    renderTasks() {\n        document.querySelector(".projectTitle").textContent = `${Projects.current}`;\n\n        deleteElementsFrom("taskList");\n        let currentTasks = filterTasks(Tasks.list);\n        currentTasks.forEach((task, index) => {\n            let taskContainer = `task${index + 1}`;\n            addElement(taskContainer, "div", "taskList", "task");\n\n            addCheckbox(task, taskContainer);\n            addTextElement(task.name, "p", taskContainer, "name");\n            addTextElement(task.description, "p", taskContainer, "description");\n            addTextElement(task.date, "p", taskContainer, "date");\n            addElement("divider", "div", "taskList", "divider");\n\n            let star = (task.priority) ? "star" : "star_outline";\n            addIcon(star, taskContainer, (e) => {task.favourite()});\n            addIcon("edit", taskContainer, () => {task.edit()});\n            addIcon("close", taskContainer, () => {Tasks.delete(task)});\n\n            let elements = [...document.getElementById(`${taskContainer}`).children];\n\n            if (task.completed) {\n                elements.forEach(element => element.classList.add("completed"));\n            } else {\n                elements.forEach(element => element.classList.remove("completed"));\n            }\n\n            if (overdue(task.date)) {\n                elements[3].classList.add("overdue");\n            } else {\n                elements[3].classList.remove("overdue");\n            }\n        })\n    }\n}\n\nconst Screen = new Renderer;\n;// ./src/index.js\n\n\n\n\n\n\n\n\nScreen.render();\n\nlet defaultTasks = [\n    ["Dinner", "Prepare chicken and marinade", "Home", "11/12/2024"],\n    ["Walk", "Take a stroll with the dog", "Home", "06/03/2025"],\n    ["Meeting", "Write up meeting minutes from yesterday", "Work", "14/04/2025"],\n    ["Clean", "Tidy up the living room", "Home", "30/11/2024"],\n    ["Dishes", "Wash up dishes", "Home", "03/11/2025"],\n    ["Slides", "Present competitive research analysis", "Work", "16/10/2026"],\n    ["Email", "Reply to email regarding open tickets", "Work", "22/07/2025"],\n    ["Thesis", "Draft body structure and main arguments", "Study", "01/05/2026"],\n    ["Revise", "Read Chapter 4-6 and prepare notes", "Study", "28/01/2025"],\n    ["Repair", "Buy a new bulb to fix the ceiling light", "Home", "06/06/2025"],\n    ["Report", "Submit financial report to HR", "Work", "15/10/2025"],\n    ["Essay", "Edit conclusion and add references", "Study", "12/04/2025"],\n    ["Homework", "Complete exercise problems", "Home", "02/12/2026"],\n    ["Finals", "Finish practice paper 1 & 2", "Study", "09/09/2025"]\n];\nlet tasks = localStorage.getItem(\'tasks\')\ntasks = \'\';\n\nif (tasks && JSON.parse(tasks).length > 1) {\n    JSON.parse(tasks).forEach(task => Tasks.add(task.name, task.description, task.project, task.date, task.completed, task.priority));\n} else {\n    defaultTasks.forEach(task => Tasks.add(task[0], task[1], task[2], task[3]));\n}\n\n\nlet defaultProjects = [ "Inbox", "Important", "Overdue", "Upcoming", "Home", "Work", "Study" ];\nlet projects = localStorage.getItem(\'projects\')\nprojects = \'\';\n\nif (projects && JSON.parse(projects).length > 1) {\n    JSON.parse(projects).forEach(project => Projects.add(project.name));\n} else {\n    defaultProjects.forEach(project => Projects.add(project));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///558\n')}},__webpack_exports__={};__webpack_modules__[558]()})();